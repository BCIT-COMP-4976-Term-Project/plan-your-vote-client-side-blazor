@using System.Text.Json

@layout PlanningNavBar
@inject HttpClient Http

@page "/Candidates"

@if (races == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class='container'>
        <select class="custom-select mb-3">
            <option value="ballot-order">Ballot Order</option>
            <option value="ballot-order">A to Z</option>
            <option value="ballot-order">Z to A</option>
        </select>
        <h2>@result.RootElement.GetProperty("votingPage").GetProperty("PageTitle").ToString()</h2>
        <h4><span class='card-subtitle mb-2 text-muted'>@result.RootElement.GetProperty("votingPage").GetProperty("PageDescription").ToString()</span></h4>
        <div class='row'>
            @foreach (var race in races)
            {  
                <div class='col-12'>
                    <h2>@race.GetProperty("PositionName")</h2>
                    <h4>For this election, please select <b>@race.GetProperty("NumberNeeded").GetInt16()</b> candidate</h4>
                    <br>
                    <p></p>
                </div>
                @foreach(var candidate in race.GetProperty("Candidates").EnumerateArray())
                    var image = "https://vote-cms.azurewebsites.net/" + candidate.GetProperty("Picture").ToString();
                    var platform = "";
                    string[] priority = new string[3];
                    List<string> contacts = new List<string>();
                    var biography = "";

                    foreach(var detail in candidate.GetProperty("Details").EnumerateArray())
                    {
                        if(detail.GetProperty("Title").ToString().Equals("Priority 1")){
                            priority[0] = detail.GetProperty("Text").ToString();
                        }
                        else if(detail.GetProperty("Title").ToString().Equals("Priority 2")){
                            priority[1] = detail.GetProperty("Text").ToString();
                        }
                        else if(detail.GetProperty("Title").ToString().Equals("Priority 3")){
                            priority[2] = detail.GetProperty("Text").ToString();
                        }
                        else if(detail.GetProperty("Title").ToString().Equals("Biography")){
                            biography = detail.GetProperty("Text").ToString();
                        }
                        else
                        {
                            platform = detail.GetProperty("Text").ToString();
                        }
                    }
                    foreach(var contact in candidate.GetProperty("Contacts").EnumerateArray())
                    {
                        contacts.Add(contact.GetProperty("ContactValue").ToString());
                    }

                    <div class='col-sm-3'>
                        <div class='card' data-toggle='modal' data-target='#candidate-undefined-modal' @onclick="@(e => handleClick(@candidate.GetProperty("Name").ToString(), @image, @biography, @priority, @platform, @contacts))">
                            <img class='card-img-top' src=https://vote-cms.azurewebsites.net//@candidate.GetProperty("Picture") alt=@candidate.GetProperty("Name")/>
                            <div class='card-body'>
                                <h5 class='card-title'>@candidate.GetProperty("Name")</h5>
                                <h6 class='card-subtitle mb-2 text-muted'></h6>
                            </div>     
                        </div>
                    </div>       
                }  
            }   
        </div>      
    </div>   
}

@functions 
{
    ElementReference CardReference;

    private JsonElement[] races { get; set; }
    private HttpResponseMessage message { get; set;}

    private JsonDocument result { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        await RefreshCandidateList();
    }
    
    private async Task RefreshCandidateList()
    {
        try
        {
            message.EnsureSuccessStatusCode();
            result      = JsonDocument.Parse(await message.Content.ReadAsStringAsync());
            races       = new JsonElement[result.RootElement.GetProperty("races").GetArrayLength()];
            foreach(var race in result.RootElement.GetProperty("races").EnumerateArray()){
                races[race.GetProperty("BallotOrder").GetInt16()-1] = race;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Console.Write("Must execute here");
        }
        
    }

    class Person
    {
        string name { get; set; }
        string bio { get; set; }
        string image { get; set; }

        string position { get; set;}
    }

    private void handleClick(string name, string picture, string biography, string[] priority, string platform, List<string> contacts) 
    {

    }

}
<style>
.card-body {
  text-align: center;
}

.card {
  cursor: pointer;
  border: none;
  margin-bottom: 20px;
}

.card:hover {
  box-shadow: 0 0 40px #d30d80;
  color: #3a7999;
  background: rgba(0, 0, 0, 0);
  transform: scale(1.1, 1.1);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: #e60050;
}

</style>